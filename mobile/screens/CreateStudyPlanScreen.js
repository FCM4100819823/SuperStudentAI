import React, { useState } from 'react';
import {
    View, Text, TextInput, StyleSheet, TouchableOpacity, ScrollView, ActivityIndicator, Alert, KeyboardAvoidingView, Platform, Switch
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { MaterialIcons } from '@expo/vector-icons';
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { getAuth } from 'firebase/auth';

// Replace with your actual backend URL
const API_URL = 'http://172.20.10.4:5000/api'; // Or your deployed backend URL

const CreateStudyPlanScreen = ({ route }) => {
    const navigation = useNavigation();
    const auth = getAuth();
    const { syllabusAnalysisId, syllabusTitle } = route.params || {};

    const [title, setTitle] = useState(syllabusTitle ? `Study Plan for ${syllabusTitle}` : '');
    const [description, setDescription] = useState('');
    const [userGoals, setUserGoals] = useState('');
    const [loading, setLoading] = useState(false);
    const [useAISuggestions, setUseAISuggestions] = useState(true);

    const handleCreatePlan = async () => {
        if (!title.trim()) {
            Alert.alert("Validation Error", "Please enter a title for your study plan.");
            return;
        }

        setLoading(true);
        try {
            const user = auth.currentUser;
            if (!user) {
                Alert.alert("Authentication Error", "No user logged in.");
                setLoading(false);
                return;
            }
            const token = await user.getIdToken();

            const payload = {
                title: title.trim(),
                description: description.trim(),
                syllabusAnalysisId: useAISuggestions ? syllabusAnalysisId : undefined,
                userGoals: useAISuggestions ? userGoals.trim() : undefined,
                // tasks: [] // Initially, tasks will be generated by AI if applicable, or added later
            };

            const response = await axios.post(`${API_URL}/study-plans`, payload, {
                headers: { Authorization: `Bearer ${token}` },
            });

            if (response.status === 201) {
                Alert.alert("Success", "Study plan created successfully! AI is generating tasks if applicable.");
                navigation.goBack(); // Or navigate to the new plan's detail screen
            } else {
                Alert.alert("Error", "Failed to create study plan. " + (response.data?.message || ''));
            }
        } catch (error) {
            console.error("Error creating study plan:", error.response?.data || error.message);
            Alert.alert("Error", "An error occurred while creating the study plan. " + (error.response?.data?.message || error.message));
        } finally {
            setLoading(false);
        }
    };
    
    const ScrollWrapper = Platform.OS === 'web' ? View : ScrollView;
    const scrollWrapperProps = Platform.OS === 'web' ? {style: styles.webScroll} : {contentContainerStyle: styles.scrollContentContainer}; 

    return (
        <KeyboardAvoidingView 
            behavior={Platform.OS === "ios" ? "padding" : "height"} 
            style={styles.container}
            keyboardVerticalOffset={Platform.OS === "ios" ? 64 : 0} // Standard offset for iOS header
        >
            <View style={styles.headerBar}>
                <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
                    <MaterialIcons name="arrow-back-ios" size={24} color="#FFFFFF" />
                </TouchableOpacity>
                <Text style={styles.headerTitle}>Create New Study Plan</Text>
            </View>
            <ScrollWrapper {...scrollWrapperProps}>
                <View style={styles.inputGroup}>
                    <Text style={styles.label}>Title*</Text>
                    <TextInput
                        style={styles.input}
                        value={title}
                        onChangeText={setTitle}
                        placeholder="e.g., Midterm Exam Prep, Chapter 1-5 Study"
                        placeholderTextColor="#B0BEC5"
                    />
                </View>

                <View style={styles.inputGroup}>
                    <Text style={styles.label}>Description (Optional)</Text>
                    <TextInput
                        style={[styles.input, styles.textArea]}
                        value={description}
                        onChangeText={setDescription}
                        placeholder="e.g., Focus on key concepts and practice problems"
                        placeholderTextColor="#B0BEC5"
                        multiline
                        numberOfLines={3}
                    />
                </View>

                {syllabusAnalysisId && (
                     <View style={styles.infoBox}>
                        <MaterialIcons name="info-outline" size={20} color="#4A90E2" />
                        <Text style={styles.infoText}>This plan can be linked to your uploaded syllabus: '{syllabusTitle || "Selected Syllabus"}'. AI will use it to suggest tasks if enabled below.</Text>
                    </View>
                )}

                <View style={styles.switchContainer}>
                    <Text style={styles.switchLabel}>Use AI to Suggest Tasks?</Text>
                    <Switch
                        trackColor={{ false: "#767577", true: "#81b0ff" }}
                        thumbColor={useAISuggestions ? "#4A90E2" : "#f4f3f4"}
                        ios_backgroundColor="#3e3e3e"
                        onValueChange={setUseAISuggestions}
                        value={useAISuggestions}
                    />
                </View>

                {useAISuggestions && (
                    <View style={styles.inputGroup}>
                        <Text style={styles.label}>Your Goals / Key Topics (Optional, for AI)</Text>
                        <TextInput
                            style={[styles.input, styles.textArea]}
                            value={userGoals}
                            onChangeText={setUserGoals}
                            placeholder="e.g., Understand quantum entanglement, Master differentiation rules, Prepare for essay on historical event X"
                            placeholderTextColor="#B0BEC5"
                            multiline
                            numberOfLines={4}
                        />
                    </View>
                )}

                <TouchableOpacity style={styles.createButton} onPress={handleCreatePlan} disabled={loading}>
                    {loading ? (
                        <ActivityIndicator size="small" color="#FFFFFF" />
                    ) : (
                        <Text style={styles.createButtonText}>Create Plan</Text>
                    )}
                </TouchableOpacity>
            </ScrollWrapper>
        </KeyboardAvoidingView>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#F0F4F8', // Light, motivating background
    },
    headerBar: {
        backgroundColor: '#4A90E2', // Primary color
        paddingTop: Platform.OS === 'android' ? 25 : 50, // Adjust for status bar
        paddingBottom: 15,
        paddingHorizontal: 15,
        flexDirection: 'row',
        alignItems: 'center',
        // Shadow for a bit of depth (optional, adjust as needed)
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 3,
        elevation: 3,
    },
    backButton: {
        marginRight: 15,
        padding: 5, // Easier to tap
    },
    headerTitle: {
        fontSize: 20,
        fontWeight: 'bold',
        color: '#FFFFFF',
    },
    webScroll: {
        height: 'calc(100vh - 70px)', // Adjust 70px based on headerBar height
        overflowY: 'auto',
    },
    scrollContentContainer: {
        padding: 20,
        paddingTop: 25, // Added padding to separate from header
        paddingBottom: 40, // Extra padding at the bottom
    },
    inputGroup: {
        marginBottom: 20,
    },
    label: {
        fontSize: 16,
        color: '#455A64',
        marginBottom: 8,
        fontWeight: '500',
    },
    input: {
        backgroundColor: '#FFFFFF',
        borderRadius: 8,
        paddingHorizontal: 15,
        paddingVertical: Platform.OS === 'ios' ? 15 : 12,
        fontSize: 16,
        color: '#37474F',
        borderWidth: 1,
        borderColor: '#CFD8DC',
    },
    textArea: {
        minHeight: 80,
        textAlignVertical: 'top',
    },
    infoBox: {
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: '#E3F2FD',
        padding: 12,
        borderRadius: 8,
        marginBottom: 20,
    },
    infoText: {
        flex: 1,
        marginLeft: 10,
        fontSize: 13,
        color: '#1E88E5',
    },
    switchContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        paddingVertical: 10,
        paddingHorizontal: 5,
        backgroundColor: '#FFFFFF',
        borderRadius: 8,
        borderWidth: 1,
        borderColor: '#CFD8DC',
        marginBottom: 20,
        padding: 15,
    },
    switchLabel: {
        fontSize: 16,
        color: '#37474F',
        fontWeight: '500',
    },
    createButton: {
        backgroundColor: '#4A90E2',
        paddingVertical: 15,
        borderRadius: 8,
        alignItems: 'center',
        marginTop: 10,
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 3,
        elevation: 3,
    },
    createButtonText: {
        color: '#FFFFFF',
        fontSize: 18,
        fontWeight: 'bold',
    },
});

export default CreateStudyPlanScreen;
